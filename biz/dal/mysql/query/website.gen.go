// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"soladxy/oyasumi/biz/dal/mysql/model"
)

func newWebsite(db *gorm.DB, opts ...gen.DOOption) website {
	_website := website{}

	_website.websiteDo.UseDB(db, opts...)
	_website.websiteDo.UseModel(&model.Website{})

	tableName := _website.websiteDo.TableName()
	_website.ALL = field.NewAsterisk(tableName)
	_website.WebsiteID = field.NewString(tableName, "website_id")
	_website.Name = field.NewString(tableName, "name")
	_website.Domain = field.NewString(tableName, "domain")
	_website.ShareID = field.NewString(tableName, "share_id")
	_website.ResetAt = field.NewTime(tableName, "reset_at")
	_website.UserID = field.NewString(tableName, "user_id")
	_website.CreatedAt = field.NewTime(tableName, "created_at")
	_website.UpdatedAt = field.NewTime(tableName, "updated_at")
	_website.DeletedAt = field.NewField(tableName, "deleted_at")
	_website.CreatedBy = field.NewString(tableName, "created_by")
	_website.TeamID = field.NewString(tableName, "team_id")

	_website.fillFieldMap()

	return _website
}

type website struct {
	websiteDo websiteDo

	ALL       field.Asterisk
	WebsiteID field.String
	Name      field.String
	Domain    field.String
	ShareID   field.String
	ResetAt   field.Time
	UserID    field.String
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	CreatedBy field.String
	TeamID    field.String

	fieldMap map[string]field.Expr
}

func (w website) Table(newTableName string) *website {
	w.websiteDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w website) As(alias string) *website {
	w.websiteDo.DO = *(w.websiteDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *website) updateTableName(table string) *website {
	w.ALL = field.NewAsterisk(table)
	w.WebsiteID = field.NewString(table, "website_id")
	w.Name = field.NewString(table, "name")
	w.Domain = field.NewString(table, "domain")
	w.ShareID = field.NewString(table, "share_id")
	w.ResetAt = field.NewTime(table, "reset_at")
	w.UserID = field.NewString(table, "user_id")
	w.CreatedAt = field.NewTime(table, "created_at")
	w.UpdatedAt = field.NewTime(table, "updated_at")
	w.DeletedAt = field.NewField(table, "deleted_at")
	w.CreatedBy = field.NewString(table, "created_by")
	w.TeamID = field.NewString(table, "team_id")

	w.fillFieldMap()

	return w
}

func (w *website) WithContext(ctx context.Context) *websiteDo { return w.websiteDo.WithContext(ctx) }

func (w website) TableName() string { return w.websiteDo.TableName() }

func (w website) Alias() string { return w.websiteDo.Alias() }

func (w website) Columns(cols ...field.Expr) gen.Columns { return w.websiteDo.Columns(cols...) }

func (w *website) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *website) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 11)
	w.fieldMap["website_id"] = w.WebsiteID
	w.fieldMap["name"] = w.Name
	w.fieldMap["domain"] = w.Domain
	w.fieldMap["share_id"] = w.ShareID
	w.fieldMap["reset_at"] = w.ResetAt
	w.fieldMap["user_id"] = w.UserID
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["deleted_at"] = w.DeletedAt
	w.fieldMap["created_by"] = w.CreatedBy
	w.fieldMap["team_id"] = w.TeamID
}

func (w website) clone(db *gorm.DB) website {
	w.websiteDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w website) replaceDB(db *gorm.DB) website {
	w.websiteDo.ReplaceDB(db)
	return w
}

type websiteDo struct{ gen.DO }

func (w websiteDo) Debug() *websiteDo {
	return w.withDO(w.DO.Debug())
}

func (w websiteDo) WithContext(ctx context.Context) *websiteDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w websiteDo) ReadDB() *websiteDo {
	return w.Clauses(dbresolver.Read)
}

func (w websiteDo) WriteDB() *websiteDo {
	return w.Clauses(dbresolver.Write)
}

func (w websiteDo) Session(config *gorm.Session) *websiteDo {
	return w.withDO(w.DO.Session(config))
}

func (w websiteDo) Clauses(conds ...clause.Expression) *websiteDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w websiteDo) Returning(value interface{}, columns ...string) *websiteDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w websiteDo) Not(conds ...gen.Condition) *websiteDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w websiteDo) Or(conds ...gen.Condition) *websiteDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w websiteDo) Select(conds ...field.Expr) *websiteDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w websiteDo) Where(conds ...gen.Condition) *websiteDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w websiteDo) Order(conds ...field.Expr) *websiteDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w websiteDo) Distinct(cols ...field.Expr) *websiteDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w websiteDo) Omit(cols ...field.Expr) *websiteDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w websiteDo) Join(table schema.Tabler, on ...field.Expr) *websiteDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w websiteDo) LeftJoin(table schema.Tabler, on ...field.Expr) *websiteDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w websiteDo) RightJoin(table schema.Tabler, on ...field.Expr) *websiteDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w websiteDo) Group(cols ...field.Expr) *websiteDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w websiteDo) Having(conds ...gen.Condition) *websiteDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w websiteDo) Limit(limit int) *websiteDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w websiteDo) Offset(offset int) *websiteDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w websiteDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *websiteDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w websiteDo) Unscoped() *websiteDo {
	return w.withDO(w.DO.Unscoped())
}

func (w websiteDo) Create(values ...*model.Website) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w websiteDo) CreateInBatches(values []*model.Website, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w websiteDo) Save(values ...*model.Website) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w websiteDo) First() (*model.Website, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Website), nil
	}
}

func (w websiteDo) Take() (*model.Website, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Website), nil
	}
}

func (w websiteDo) Last() (*model.Website, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Website), nil
	}
}

func (w websiteDo) Find() ([]*model.Website, error) {
	result, err := w.DO.Find()
	return result.([]*model.Website), err
}

func (w websiteDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Website, err error) {
	buf := make([]*model.Website, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w websiteDo) FindInBatches(result *[]*model.Website, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w websiteDo) Attrs(attrs ...field.AssignExpr) *websiteDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w websiteDo) Assign(attrs ...field.AssignExpr) *websiteDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w websiteDo) Joins(fields ...field.RelationField) *websiteDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w websiteDo) Preload(fields ...field.RelationField) *websiteDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w websiteDo) FirstOrInit() (*model.Website, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Website), nil
	}
}

func (w websiteDo) FirstOrCreate() (*model.Website, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Website), nil
	}
}

func (w websiteDo) FindByPage(offset int, limit int) (result []*model.Website, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w websiteDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w websiteDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w websiteDo) Delete(models ...*model.Website) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *websiteDo) withDO(do gen.Dao) *websiteDo {
	w.DO = *do.(*gen.DO)
	return w
}
